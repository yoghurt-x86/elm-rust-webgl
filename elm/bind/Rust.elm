
-- generated by elm_rs


module Rust exposing (..)

import Dict exposing (Dict)
import Http
import Json.Decode
import Json.Encode
import Url.Builder


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]
        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


type Msg
    = Focus
    | Unfocus
    | ChangeFov { angle : Float }
    | ChangeEnvLight { r : Float, g : Float, b : Float }
    | ChangeAmbientLight { r : Float, g : Float, b : Float }


msgEncoder : Msg -> Json.Encode.Value
msgEncoder enum =
    case enum of
        Focus ->
            Json.Encode.object [ ( "type", Json.Encode.string "Focus" ) ]
        Unfocus ->
            Json.Encode.object [ ( "type", Json.Encode.string "Unfocus" ) ]
        ChangeFov { angle } ->
            Json.Encode.object [ ( "type", Json.Encode.string "ChangeFOV" ), ( "angle", Json.Encode.float angle ) ]
        ChangeEnvLight { r, g, b } ->
            Json.Encode.object [ ( "type", Json.Encode.string "ChangeEnvLight" ), ( "r", Json.Encode.float r ), ( "g", Json.Encode.float g ), ( "b", Json.Encode.float b ) ]
        ChangeAmbientLight { r, g, b } ->
            Json.Encode.object [ ( "type", Json.Encode.string "ChangeAmbientLight" ), ( "r", Json.Encode.float r ), ( "g", Json.Encode.float g ), ( "b", Json.Encode.float b ) ]

msgDecoder : Json.Decode.Decoder Msg
msgDecoder = 
        let
            elmRsConstructChangeFov angle =
                        ChangeFov { angle = angle }
            elmRsConstructChangeEnvLight r g b =
                            ChangeEnvLight { r = r, g = g, b = b }
            elmRsConstructChangeAmbientLight r g b =
                            ChangeAmbientLight { r = r, g = g, b = b }
        in
    Json.Decode.field "type" Json.Decode.string
        |> Json.Decode.andThen
            (\tag ->
                case tag of
                    "Focus" ->
                        Json.Decode.succeed Focus
                    "Unfocus" ->
                        Json.Decode.succeed Unfocus
                    "ChangeFOV" ->
                        Json.Decode.succeed elmRsConstructChangeFov |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "angle" (Json.Decode.float)))
                    "ChangeEnvLight" ->
                        Json.Decode.succeed elmRsConstructChangeEnvLight |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "r" (Json.Decode.float))) |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "g" (Json.Decode.float))) |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "b" (Json.Decode.float)))
                    "ChangeAmbientLight" ->
                        Json.Decode.succeed elmRsConstructChangeAmbientLight |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "r" (Json.Decode.float))) |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "g" (Json.Decode.float))) |> Json.Decode.andThen (\x -> Json.Decode.map x (Json.Decode.field "b" (Json.Decode.float)))
                    unexpected ->
                        Json.Decode.fail <| "Unexpected variant " ++ unexpected
            )

